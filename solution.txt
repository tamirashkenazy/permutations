Solution:
    The main idea behind my solution is to make a fast response for each similar word request, by getting the list in O(1).

    I had to find a representation for similar words that will be the Key for all permutations.
    In a word request, i will be able to convert the word to the representation and get the list of the similar words.

The word representation (the Key):
    word letters sorted in alphabet order
    for example:
        ache -> aceh
        each -> aceh
    the sort is taking O(1) for finite number of letters

Preprocessing:
    The preprocessing is populating hashmap, where each Key (Key is the sorted word)
    is mapping to the list of its permutations

    for example:
        words_clean.txt:
            a
            aab
            aba
            ache
            baa
            each

        - hash_map will have the following key-values:
            key: a                   value: a
            key: aab                 value: aab aba baa
            key: aceh                value: ache each

    in addition to that, it will count the number of the words at the beginning and will update the statistics:
        totalWords = <number of words>

Getting the list of the words - /similar?word=<some_word>:
    each word is in a hashmap where: <Key> mapped to the list of all the similar words (Key is the sorted word)
    on a GET request, the app is getting the list by the sorted word, and returns the list of the words except the requested word
    if there are no similar words of this word -> returns an empty list


Statistics - /stats GET request:
    the stats is a dictionary
    each GET request of /similar?word=<some_word> will acquire lock and will update the stats:
        add 1 to totalRequest
        update the average
    the update is happening after the response!

Locks:
    Updating the stats or the similar words hashmap depands on acquiring a lock
